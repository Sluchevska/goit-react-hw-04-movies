{"version":3,"sources":["views/Reviews/Reviews.jsx"],"names":["Reviews","movieId","useState","reviews","setReviews","useEffect","MovieApi","then","data","results","console","log","map","review","author","content","id"],"mappings":"0NAKe,SAASA,EAAT,GAA6B,IAAXC,EAAU,EAAVA,QAE/B,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAOA,OANAC,qBAAU,WACRC,IAA2BL,GAASM,MAAK,SAAAC,GACvCJ,EAAWI,EAAKC,cAEjB,CAACR,IACNS,QAAQC,IAAIR,GAER,mCACGA,GACC,6BACGA,EAAQS,KAAI,SAAAC,GAAM,OACf,+BAEI,4BAAIA,EAAOC,SACX,4BAAKD,EAAOE,YAHPF,EAAOG","file":"static/js/reviews.0f93aa8c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Route, useRouteMatch } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport * as MovieApi from '../../services/movie-api';\r\n\r\nexport default function Reviews({movieId}) {\r\n \r\n  const [reviews, setReviews] = useState(null);\r\n  useEffect(() => {\r\n    MovieApi.fetchMovieReviews(movieId).then(data => {\r\n      setReviews(data.results);\r\n    });\r\n  }, [movieId]);\r\nconsole.log(reviews)\r\n  return (\r\n    <>\r\n      {reviews && (\r\n        <ul>\r\n          {reviews.map(review => (\r\n              <li key={review.id}>\r\n                 \r\n                  <p>{review.author}</p>\r\n                  <p>{ review.content}</p>\r\n              \r\n            </li>\r\n          ))}\r\n        </ul>\r\n          )}\r\n         \r\n      </>\r\n      \r\n  );\r\n}\r\n"],"sourceRoot":""}